setwd("~/Dropbox/Research/Price_setting_and_financial_frictions/CodeRepository/data/3_sample")
library(gdata)
library(readxl)
library(data.table)
library(foreign)
## Load prodcom (main data source)
ms <- data.frame('NA',1,1,1)
colnames(ms) <- c('prodcode','val_EU28','val_DK','year')
yy <- 2005
print(yy)
prodcom <- read.xls(paste0('../5_demand_elasticities/in/PRODCOM/Website_snapshot_',yy,'_N2.xlsx'))
for (k in 1:ncol(prodcom)){
prodcom[,k] <- as.character(prodcom[,k])
}
unlist(c(prodcom[2,]))
colnames(prodcom) <- unlist(c(prodcom[2,]))  # column names should be countries in 2nd row
6:nrow(prodcom)
which(prodcom[2,] %in% c('Value EU28','Denmark'))
prodcom <- prodcom[6:nrow(prodcom), c(1, which(prodcom[2,] %in% c('Value EU28','Denmark')))]  # get values for EU28 and DK
for (k in 2:ncol(prodcom)){
prodcom[,k] <- as.numeric(prodcom[,k])
prodcom[is.na(prodcom[,k]), k] <- 0
}
colnames(prodcom)[which(colnames(prodcom) == 'PRODCOM Code')] <- 'prodcode'
colnames(prodcom)[which(colnames(prodcom) == 'Value EU28')] <- 'val_EU28' # values in 1000 EUR
colnames(prodcom)[which(colnames(prodcom) == 'Denmark')] <- 'val_DK'
prodcom$year <- yy
ms <- rbind(ms, prodcom)
rm(prodcom)
ms <- ms[2:nrow(ms), ]
## Aggregate from 8-digit prodcode x year to 4-digit x year
ms$prodcode <- as.character(ms$prodcode)
ms$nace <- as.numeric(substr(ms$prodcode, 1, 4))
ms <- data.table(ms)
ms <- ms[, j=list(val_EU28 = sum(val_EU28),
val_DK = sum(val_DK)),
by=list(nace,year)]
ms <- data.frame(ms[order(ms$nace, ms$year), ])
## convert exchange rate for euro area output to DKK
E <- data.frame(year = c(2005:2016))
E$E <- c(7.451927, 7.4591, 7.450551,	7.455974,	7.446251,	7.447366,	7.450529,
7.443751,	7.457982,	7.454741,	7.458572,	7.445238)
ms <- merge(ms, E, by=c('year'), all.x=T)
summary(ms$E, useNA='always')
ms$market_EU28 <- ms$val_EU28 * ms$E
## export
ms <- ms[, c('nace','year','market_EU28')]
ms <- ms[order(ms$nace, ms$year), ]
rm(ms, E, k, yy)
## Load prodcom (main data source)
prodcom <- read.xls('in/PRODCOM/Website_snapshot_2007_N2.xlsx')
setwd("~/Dropbox/Research/Price_setting_and_financial_frictions/CodeRepository/data/5_demand_elasticities")
library(gdata)
library(readxl)
library(data.table)
library(foreign)
library(stringr)
library(dplyr)
library(spatstat)
library(haven)
source('weighted_cdf.R')
## Load prodcom (main data source)
prodcom <- read.xls('in/PRODCOM/Website_snapshot_2007_N2.xlsx')
for (k in 1:ncol(prodcom)){
prodcom[,k] <- as.character(prodcom[,k])
}
colnames(prodcom) <- unlist(c(prodcom[2,])) # column names should be countries in 2nd row
prodcom <- prodcom[6:nrow(prodcom), c(1, which(prodcom[2,] %in% c('Value EU28','Denmark')))] # get values for EU28 and DK
for (k in 2:ncol(prodcom)){
prodcom[,k] <- as.numeric(prodcom[,k])
prodcom[is.na(prodcom[,k]), k] <- 0
}
colnames(prodcom)[which(colnames(prodcom) == 'PRODCOM Code')] <- 'prodcode'
colnames(prodcom)[which(colnames(prodcom) == 'Value EU28')] <- 'val_EU28'
colnames(prodcom)[which(colnames(prodcom) == 'Denmark')] <- 'val_DK'
prodcom <- prodcom[, c('prodcode','val_DK','val_EU28')]
# classify food (nace 10) and consumer packaged goods (nace 10-12 and selected others)
prodcom$food <- 0
prodcom$food[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(101, 102, 103, 104, 105, 107, 108)] <- 1
prodcom$food[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(11)] <- 1
prodcom$packagedgoods <- 0
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(101, 102, 103, 104, 105, 107, 108)] <- 1 # food
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(11, 12)] <- 1 # beverages, tobacco
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(139)] <- 1  # other textiles
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(14, 15, 18, 21)] <- 1 # wearing apparel, leather, printing, basic pharma
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(204, 323, 324, 329)] <- 1  # soap, sports goods, games/toys, nec.
table(prodcom$food, prodcom$packagedgoods)
sigmaBW <- read.xls('in/ElasticitiesBrodaWeinstein90-01_SITCRev3_4-digit.xls', sheet=1)
sigmaBW <- sigmaBW[3:nrow(sigmaBW), 1:2]
colnames(sigmaBW) <- c('sitc3_4','sigmaBW')
sigmaBW$sitc3_4 <- as.numeric(as.character(sigmaBW$sitc3_4))
sigmaBW$sigmaBW <- as.numeric(as.character(sigmaBW$sigmaBW))
View(sigmaBW)
sigmaBW <- read.xls('in/ElasticitiesBrodaWeinstein90-01_SITCRev3_4-digit.xls', sheet=1)
sigmaBW <- sigmaBW[3:nrow(sigmaBW), 1:2]
colnames(sigmaBW) <- c('sitc3_4','sigmaBW')
sigmaBW$sitc3_4 <- as.numeric(as.character(sigmaBW$sitc3_4))
sigmaBW$sigmaBW <- as.numeric(as.character(sigmaBW$sigmaBW))
conv3a <- read.xls('in/CNconversiontables/TRP1009.xlsx') # 2010 > 09
conv3a <- conv3a[4:nrow(conv3a), c(1,3)]
# from
conv1 <- read_excel('in/CNconversiontables/UN Comtrade Conversion table HS2007 to SITCRev3.xls', sheet=2, col_types=c('text'))
View(conv1)
conv1 <- conv1[8:nrow(conv1), c(4:5)]
colnames(conv1) <- c('hs07_6','sitc3_4')
conv1$hs07_6 <- str_replace_all(conv1$hs07_6, '[[:punct:]]', '')
conv1$sitc3_4 <- str_replace_all(conv1$sitc3_4, '[[:punct:]]', '')
conv1$dig_sitc3_4 <- nchar(conv1$sitc3_4)
table(conv1$dig_sitc3_4)
conv1 <- conv1[conv1$dig_sitc3_4 >= 4, ]
conv1$sitc3_4 <- as.numeric(substr(conv1$sitc3_4, 1, 4))
conv1$sitc3_4
conv1 <- read_excel('in/CNconversiontables/UN Comtrade Conversion table HS2007 to SITCRev3.xls', sheet=2, col_types=c('text'))
conv1 <- conv1[8:nrow(conv1), c(4:5)]
colnames(conv1) <- c('hs07_6','sitc3_4')
conv1$hs07_6 <- str_replace_all(conv1$hs07_6, '[[:punct:]]', '')
conv1$sitc3_4 <- str_replace_all(conv1$sitc3_4, '[[:punct:]]', '')
conv1$dig_sitc3_4 <- nchar(conv1$sitc3_4)
table(conv1$dig_sitc3_4)
conv1 <- conv1[conv1$dig_sitc3_4 >= 4, ]  # only 4-digit codes are relevant
conv1$sitc3_4 <- as.numeric(substr(conv1$sitc3_4, 1, 4))
conv1 <- conv1[, c('hs07_6','sitc3_4')]
conv1$foodproduct <- ifelse(as.numeric(substr(conv1$hs07_6, 1, 2)) > 1 & as.numeric(substr(conv1$hs07_6, 1, 2)) < 24, 1, 0)
# from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
conv2 <- read.xls('in/CNconversiontables/PRC 2010 - CN 2010.xls')
conv2$prodcode <- as.character(conv2$PRCCode) # NA's are letters, not needed
conv2$hs10_8 <- str_replace_all(as.character(conv2$CN.2010), ' ', '')
conv2 <- conv2[!is.na(as.numeric(conv2$prodcode)) & !is.na(as.numeric(conv2$hs10_8)), ]
# from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
conv2 <- read.xls('in/CNconversiontables/PRC 2010 - CN 2010.xls')
View(conv2)
conv2$prodcode <- as.character(conv2$PRCCode) # NA's are letters, not needed
conv2$hs10_8 <- str_replace_all(as.character(conv2$CN.2010), ' ', '')
conv2 <- conv2[!is.na(as.numeric(conv2$prodcode)) & !is.na(as.numeric(conv2$hs10_8)), ]
conv2 <- merge(conv2, conv3a, by=c('hs10_8'), all.x=T) # does not actually show up
conv2 <- read.xls('in/CNconversiontables/PRC 2010 - CN 2010.xls')
conv2$prodcode <- as.character(conv2$PRCCode) # NA's are letters, not needed
conv2$hs10_8 <- str_replace_all(as.character(conv2$CN.2010), ' ', '')
conv2 <- conv2[!is.na(as.numeric(conv2$prodcode)) & !is.na(as.numeric(conv2$hs10_8)), ]
conv2 <- merge(conv2, conv3a, by=c('hs10_8'), all.x=T) # does not actually show up
# 'conv2' (next paragraph) will translate from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
# Because we can only translate to CN/HS codes in 2010, we first translate from CN8 in 2007, 08, 09 to 2010:
# 2010 > 2009
conv3a <- read.xls('in/CNconversiontables/TRP1009.xlsx')
conv3a <- conv3a[4:nrow(conv3a), c(1,3)]
colnames(conv3a) <- c('hs10_8','hs09_8')
conv3a$hs10_8 <- str_replace_all(as.character(conv3a$hs10_8), ' ', '')
conv3a$hs09_8 <- str_replace_all(as.character(conv3a$hs09_8), ' ', '')
conv3a <- conv3a[substr(conv3a$hs10_8, 1, 6) != substr(conv3a$hs09_8, 1, 6), ]
# 2009 > 2008
conv3b <- read.xls('in/CNconversiontables/TRP0908.xlsx')
conv3b <- conv3b[4:nrow(conv3b), c(1,3)]
colnames(conv3b) <- c('hs09_8','hs08_8')
conv3b$hs09_8 <- str_replace_all(as.character(conv3b$hs09_8), ' ', '')
conv3b$hs08_8 <- str_replace_all(as.character(conv3b$hs08_8), ' ', '')
conv3b <- conv3b[substr(conv3b$hs09_8, 1, 6) != substr(conv3b$hs08_8, 1, 6), ]
rm(conv3b)  # no changes at 6-digit level
# 2008 > 2007
conv3c <- read.xls('in/CNconversiontables/TRP0807.xlsx')
conv3c <- conv3c[4:nrow(conv3c), c(1,3)]
colnames(conv3c) <- c('hs08_8','hs07_8')
conv3c$hs08_8 <- str_replace_all(as.character(conv3c$hs08_8), ' ', '')
conv3c$hs07_8 <- str_replace_all(as.character(conv3c$hs07_8), ' ', '')
conv3c <- conv3c[substr(conv3c$hs08_8, 1, 6) != substr(conv3c$hs07_8, 1, 6), ]
# from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
conv2 <- read.xls('in/CNconversiontables/PRC 2010 - CN 2010.xls')
conv2$prodcode <- as.character(conv2$PRCCode) # NA's are letters, not needed
conv2$hs10_8 <- str_replace_all(as.character(conv2$CN.2010), ' ', '')
conv2 <- conv2[!is.na(as.numeric(conv2$prodcode)) & !is.na(as.numeric(conv2$hs10_8)), ]
conv2 <- merge(conv2, conv3a, by=c('hs10_8'), all.x=T) # does not actually show up
colnames(conv3c)[1] <- 'hs10_8'
conv2 <- merge(conv2, conv3c, by=c('hs10_8'), all.x=T) # does not actually show up
conv2$hs07_8 <- conv2$hs10_8
conv2$hs07_6 <- substr(conv2$hs07_8, 1, 6)
conv2 <- data.table(conv2)
conv2 <- conv2[, j=list(obs=.N), by=list(prodcode, hs07_6)]
View(conv2)
conv2$foodsector <- ifelse(as.numeric(substr(conv2$prodcode, 1, 2)) %in% c(10, 11), 1, 0)
conv2$foodproduct <- ifelse(as.numeric(substr(conv2$hs07_6, 1, 2)) > 1 & as.numeric(substr(conv2$hs07_6, 1, 2)) < 24, 1, 0)
table(conv2$foodsector, conv2$foodproduct)
conv2 <- data.frame(conv2[, c('prodcode', 'hs07_6')])
rm(conv3a, conv3c)
## Merge demand elasticities to hs6: 98% coverage
conv1 <- merge(conv1, sigmaBW, by=c('sitc3_4'), all.x=T)
print(paste('There are',length(unique(conv1$hs07_6)), 'hs6 codes.'))
print(paste('Of those, we have at least one sigma for ',length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW)])), '(',
round(100*length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW)]))/length(unique(conv1$hs07_6))),
'% )'))
print(paste('In the food producing sector, we have at least one sigma for ',length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW) & conv1$foodproduct == 1])), '(',
round(100*length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW) & conv1$foodproduct == 1]))/length(unique(conv1$hs07_6[conv1$foodproduct == 1]))),
'% )'))
rm(sigmaBW)
## Merge products (hs6) to sectors (prodcode)
conv2 <- left_join(conv2, conv1, by=c('hs07_6'))
conv2 <- data.table(conv2)
conv2 <- conv2[, j=list(sigmaBW = mean(sigmaBW, na.rm=T)), by=list(prodcode)]
conv2 <- data.frame(conv2)
conv2$sigmaBW[conv2$sigmaBW %in% c(NaN)] <- NA
conv2$foodsector <- ifelse(as.numeric(substr(conv2$prodcode, 1, 2)) %in% c(10, 11), 1, 0)
summary(conv2$sigmaBW[conv2$foodsector == 0])
summary(conv2$sigmaBW[conv2$foodsector == 1])
############################################################################################
#
#  1_DE_distrib_PRODCOM.R
#
#  This script reads PRODCOM statistics from 2007 and tries to show the distribution of
#  Broda-Weinstein demand elasticities of EU and Danish industrial production.
#  The difficulty lies in the fact that the latter are estimated at the 4-digit SITC level,
#  which need to be translated to prodcode.
#
#  DEPENDENCIES:
#
#  Inputs:
#
#   - R packages gdata, readxl, data.table, foreign, stringr, dplyr, spatstat, haven
#
#   - weighted_cdf.R: function to calculate empirical cumulative density with weights
#
#   - in/PRODCOM/Website_snapshat_2007_N2.xlsx
#     varlist needed: PRODCOM Code, Value EU28, Denmark
#
#   - in/ElasticitiesBrodaWeinstein90-01_SITCRev3_4-digit.xls
#     varlist needed: sitc3_4 sigmaBW
#
#   - in/CNconversiontables/UN Comtrade Conversion table HS2007 to SITCRev3.xls
#     varlist needed: hs07_6 sitc3_4
#
#   - in/CNconversiontables/PRC 2010 - CN 2010.xls
#     varlist needed: PRCcode CN.2010
#
#   - in/CNconversiontables/TRP1009.xlsx
#   - in/CNconversiontables/TRP0908.xlsx
#   - in/CNconversiontables/TRP0807.xlsx
#
#
#  Output:
#
#   - temp/marketsize.dta
############################################################################################
library(gdata)
library(readxl)
library(data.table)
library(foreign)
library(stringr)
library(dplyr)
library(spatstat)
library(haven)
source('weighted_cdf.R')
############################################################################################
## Load prodcom (main data source needed for distribution)
############################################################################################
prodcom <- read.xls('in/PRODCOM/Website_snapshot_2007_N2.xlsx')
for (k in 1:ncol(prodcom)){
prodcom[,k] <- as.character(prodcom[,k])
}
colnames(prodcom) <- unlist(c(prodcom[2,])) # column names should be countries in 2nd row
prodcom <- prodcom[6:nrow(prodcom), c(1, which(prodcom[2,] %in% c('Value EU28','Denmark')))] # get values for EU28 and DK
for (k in 2:ncol(prodcom)){
prodcom[,k] <- as.numeric(prodcom[,k])
prodcom[is.na(prodcom[,k]), k] <- 0
}
colnames(prodcom)[which(colnames(prodcom) == 'PRODCOM Code')] <- 'prodcode'
colnames(prodcom)[which(colnames(prodcom) == 'Value EU28')] <- 'val_EU28'
colnames(prodcom)[which(colnames(prodcom) == 'Denmark')] <- 'val_DK'
prodcom <- prodcom[, c('prodcode','val_DK','val_EU28')]
# classify food (nace 10) and consumer packaged goods (nace 10-12 and selected others)
prodcom$food <- 0
prodcom$food[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(101, 102, 103, 104, 105, 107, 108)] <- 1
prodcom$food[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(11)] <- 1
prodcom$packagedgoods <- 0
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(101, 102, 103, 104, 105, 107, 108)] <- 1 # food
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(11, 12)] <- 1 # beverages, tobacco
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(139)] <- 1  # other textiles
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 2)) %in% c(14, 15, 18, 21)] <- 1 # wearing apparel, leather, printing, basic pharma
prodcom$packagedgoods[as.numeric(substr(prodcom$prodcode, 1, 3)) %in% c(204, 323, 324, 329)] <- 1  # soap, sports goods, games/toys, nec.
table(prodcom$food, prodcom$packagedgoods)
############################################################################################
## Load demand elasticities
############################################################################################
sigmaBW <- read.xls('in/ElasticitiesBrodaWeinstein90-01_SITCRev3_4-digit.xls', sheet=1)
sigmaBW <- sigmaBW[3:nrow(sigmaBW), 1:2]
colnames(sigmaBW) <- c('sitc3_4','sigmaBW')
sigmaBW$sitc3_4 <- as.numeric(as.character(sigmaBW$sitc3_4))
sigmaBW$sigmaBW <- as.numeric(as.character(sigmaBW$sigmaBW))
############################################################################################
## Load conversion tables
############################################################################################
# from SITC Rev. 3 (4-digit) to HS8 (2007 vintage, 6-digit)
conv1 <- read_excel('in/CNconversiontables/UN Comtrade Conversion table HS2007 to SITCRev3.xls', sheet=2, col_types=c('text'))
conv1 <- conv1[8:nrow(conv1), c(4:5)]
colnames(conv1) <- c('hs07_6','sitc3_4')
conv1$hs07_6 <- str_replace_all(conv1$hs07_6, '[[:punct:]]', '')
conv1$sitc3_4 <- str_replace_all(conv1$sitc3_4, '[[:punct:]]', '')
conv1$dig_sitc3_4 <- nchar(conv1$sitc3_4)
table(conv1$dig_sitc3_4)
conv1 <- conv1[conv1$dig_sitc3_4 >= 4, ]  # only 4-digit codes are relevant
conv1$sitc3_4 <- as.numeric(substr(conv1$sitc3_4, 1, 4))
conv1 <- conv1[, c('hs07_6','sitc3_4')]
conv1$foodproduct <- ifelse(as.numeric(substr(conv1$hs07_6, 1, 2)) > 1 & as.numeric(substr(conv1$hs07_6, 1, 2)) < 24, 1, 0)
# 'conv2' (next paragraph) will translate from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
# Because we can only translate to CN/HS codes in 2010, we first translate from CN8 in 2007, 08, 09 to 2010:
# 2010 > 2009
conv3a <- read.xls('in/CNconversiontables/TRP1009.xlsx')
conv3a <- conv3a[4:nrow(conv3a), c(1,3)]
colnames(conv3a) <- c('hs10_8','hs09_8')
conv3a$hs10_8 <- str_replace_all(as.character(conv3a$hs10_8), ' ', '')
conv3a$hs09_8 <- str_replace_all(as.character(conv3a$hs09_8), ' ', '')
conv3a <- conv3a[substr(conv3a$hs10_8, 1, 6) != substr(conv3a$hs09_8, 1, 6), ]
# 2009 > 2008
conv3b <- read.xls('in/CNconversiontables/TRP0908.xlsx')
conv3b <- conv3b[4:nrow(conv3b), c(1,3)]
colnames(conv3b) <- c('hs09_8','hs08_8')
conv3b$hs09_8 <- str_replace_all(as.character(conv3b$hs09_8), ' ', '')
conv3b$hs08_8 <- str_replace_all(as.character(conv3b$hs08_8), ' ', '')
conv3b <- conv3b[substr(conv3b$hs09_8, 1, 6) != substr(conv3b$hs08_8, 1, 6), ]
rm(conv3b)  # no changes at 6-digit level
# 2008 > 2007
conv3c <- read.xls('in/CNconversiontables/TRP0807.xlsx')
conv3c <- conv3c[4:nrow(conv3c), c(1,3)]
colnames(conv3c) <- c('hs08_8','hs07_8')
conv3c$hs08_8 <- str_replace_all(as.character(conv3c$hs08_8), ' ', '')
conv3c$hs07_8 <- str_replace_all(as.character(conv3c$hs07_8), ' ', '')
conv3c <- conv3c[substr(conv3c$hs08_8, 1, 6) != substr(conv3c$hs07_8, 1, 6), ]
# from HS8 (2010 vintage, 8-digit) to Prodcom/Prodcode (2010 vintage)
conv2 <- read.xls('in/CNconversiontables/PRC 2010 - CN 2010.xls')
conv2$prodcode <- as.character(conv2$PRCCode) # NA's are letters, not needed
conv2$hs10_8 <- str_replace_all(as.character(conv2$CN.2010), ' ', '')
conv2 <- conv2[!is.na(as.numeric(conv2$prodcode)) & !is.na(as.numeric(conv2$hs10_8)), ]
conv2 <- merge(conv2, conv3a, by=c('hs10_8'), all.x=T) # does not actually show up
colnames(conv3c)[1] <- 'hs10_8'
conv2 <- merge(conv2, conv3c, by=c('hs10_8'), all.x=T) # does not actually show up
conv2$hs07_8 <- conv2$hs10_8
conv2$hs07_6 <- substr(conv2$hs07_8, 1, 6)  # 6-digit
conv2 <- data.table(conv2)
conv2 <- conv2[, j=list(obs=.N), by=list(prodcode, hs07_6)]   # final translation matrix
conv2$foodsector <- ifelse(as.numeric(substr(conv2$prodcode, 1, 2)) %in% c(10, 11), 1, 0)
conv2$foodproduct <- ifelse(as.numeric(substr(conv2$hs07_6, 1, 2)) > 1 & as.numeric(substr(conv2$hs07_6, 1, 2)) < 24, 1, 0)
table(conv2$foodsector, conv2$foodproduct)
conv2 <- data.frame(conv2[, c('prodcode', 'hs07_6')])
rm(conv3a, conv3c)
############################################################################################
## Merges
############################################################################################
## Merge demand elasticities to hs6: 98% coverage
conv1 <- merge(conv1, sigmaBW, by=c('sitc3_4'), all.x=T)
print(paste('There are',length(unique(conv1$hs07_6)), 'hs6 codes.'))
print(paste('Of those, we have at least one sigma for ',length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW)])), '(',
round(100*length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW)]))/length(unique(conv1$hs07_6))),
'% )'))
print(paste('In the food producing sector, we have at least one sigma for ',length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW) & conv1$foodproduct == 1])), '(',
round(100*length(unique(conv1$hs07_6[!is.na(conv1$sigmaBW) & conv1$foodproduct == 1]))/length(unique(conv1$hs07_6[conv1$foodproduct == 1]))),
'% )'))
rm(sigmaBW)
## Merge products (hs6) to sectors (prodcode)
conv2 <- left_join(conv2, conv1, by=c('hs07_6'))
conv2 <- data.table(conv2)
conv2 <- conv2[, j=list(sigmaBW = mean(sigmaBW, na.rm=T)), by=list(prodcode)]
conv2 <- data.frame(conv2)
conv2$sigmaBW[conv2$sigmaBW %in% c(NaN)] <- NA
prodcom <- merge(prodcom, conv2, by=c('prodcode'), all.x=T)
## Match analysis
print(paste('There are',length(unique(prodcom$prodcode)), 'prodcodes.'))
print(paste('Of those, we have a sigma for ',length(unique(prodcom$prodcode[!is.na(prodcom$sigmaBW)])), '(',
round(100*length(unique(prodcom$prodcode[!is.na(prodcom$sigmaBW)]))/length(unique(prodcom$prodcode))),
'%)'))
print(paste('This represents', round(100*sum(prodcom$val_DK[!is.na(prodcom$sigmaBW)])/sum(prodcom$val_DK)),
'% of Danish sales.'))
print(paste('This represents', round(100*sum(prodcom$val_DK[!is.na(prodcom$sigmaBW) & prodcom$food == 1])/sum(prodcom$val_DK[prodcom$food == 1])),
'% of Danish food sales.'))
print(paste('This represents', round(100*sum(prodcom$val_DK[!is.na(prodcom$sigmaBW) & prodcom$packagedgoods == 1])/sum(prodcom$val_DK[prodcom$packagedgoods == 1])),
'% of packaged goods sales in Denmark.'))
## CDFs for Broda&Weinstein elasticities
cdf_EU <- weighted_cdf(prodcom$sigmaBW, prodcom$val_EU28, 'EU')
cdf_DK <- weighted_cdf(prodcom$sigmaBW, prodcom$val_DK, 'DK')
cdf_DKfood <- weighted_cdf(prodcom$sigmaBW[prodcom$food == 1], prodcom$val_DK[prodcom$food == 1], 'DK_food')
cdf_DKcpg <- weighted_cdf(prodcom$sigmaBW[prodcom$packagedgoods == 1], prodcom$val_DK[prodcom$packagedgoods == 1], 'DK_cpg')
cdf_all <- merge(cdf_EU, cdf_DK, by=c('x'), all.x=T, all.y=T)
cdf_all <- merge(cdf_all, cdf_DKfood, by=c('x'), all.x=T, all.y=T)
cdf_all <- merge(cdf_all, cdf_DKcpg, by=c('x'), all.x=T, all.y=T)
rm(cdf_EU, cdf_DK, cdf_DKfood, cdf_DKcpg)
rm(conf2, conv1)
rm(conv2, conv1)
# plot in 1 figure
for (i in 2:nrow(cdf_all)){
if (is.na(cdf_all$cdf_DK_food[i])){
cdf_all$cdf_DK_food[i] <- cdf_all$cdf_DK_food[i-1]
}
if (is.na(cdf_all$cdf_DK_cpg[i])){
cdf_all$cdf_DK_cpg[i] <- cdf_all$cdf_DK_cpg[i-1]
}
}
plot(cdf_all$x, cdf_all$cdf_EU, 's', xlim=c(1, 26), col='red')
lines(cdf_all$x, cdf_all$cdf_DK, 's', col='blue')
lines(cdf_all$x, cdf_all$cdf_DK_food, 's', col='red',lty=3)
lines(cdf_all$x, cdf_all$cdf_DK_cpg, 's', col='red',lty=2)
legend('bottomright',legend=c('weighted DK','weighted EU','weighted DK food','weighted DK CPG'), lty=c(1,1,3,2), col=c('red','blue','red','red'), box.lty=0)
weighted.median(prodcom$sigmaBW[prodcom$food == 1], w=prodcom$val_DK[prodcom$food == 1])  # 8.6
weighted.median(prodcom$sigmaBW[prodcom$packagedgoods == 1], w=prodcom$val_DK[prodcom$packagedgoods == 1])   # 5.7
colnames(cdf_all)[colnames(cdf_all) == 'x'] <- 'sigmaBW'
rm(cdf_all)
cpg <- data.table(prodcom[prodcom$packagedgoods == 1, ])
cpg$cat <- 0
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(101)] <- 101
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(102)] <- 102
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(103)] <- 103
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(104)] <- 104
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(105)] <- 105
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(107)] <- 107
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(108)] <- 108
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(11)] <- 11
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(12)] <- 12
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(139)] <- 139
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(14)] <- 14
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(15)] <- 15
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(18)] <- 18
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(204)] <- 204
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(21)] <- 21
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(323)] <- 323
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(324)] <- 324
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(329)] <- 329
cpg$val_DK_cat <- ave(cpg$val_DK, by=list(cpg$cat), FUN=function(x) sum(x))
cpg <- data.table(prodcom[prodcom$packagedgoods == 1, ])
cpg <- data.table(prodcom[prodcom$packagedgoods == 1, ])   # save all prodcodes for consumer packaged goods
cpg$cat <- 0
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(101)] <- 101
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(102)] <- 102
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(103)] <- 103
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(104)] <- 104
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(105)] <- 105
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(107)] <- 107
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(108)] <- 108
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(11)] <- 11
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(12)] <- 12
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(139)] <- 139
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(14)] <- 14
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(15)] <- 15
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(18)] <- 18
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(204)] <- 204
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 2)) %in% c(21)] <- 21
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(323)] <- 323
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(324)] <- 324
cpg$cat[as.numeric(substr(cpg$prodcode, 1, 3)) %in% c(329)] <- 329
cpg$val_DK
# sum over their values to get overall weights in industrial production
cpg$val_DK_cat <- ave(cpg$val_DK, by=list(cpg$cat), FUN=function(x) sum(x))
cpg$val_DK_wgt <- cpg$val_DK / cpg$val_DK_cat
cpg <- cpg[, j=list(val_DK = sum(val_DK),
sigmaBW = mean(sigmaBW, na.rm=T)), by=list(cat)]
cpg$val_DK <- cpg$val_DK / sum(cpg$val_DK) * 100
cpg
rm(cpg, prodcom)
